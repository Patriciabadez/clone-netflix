{"ast":null,"code":"var _jsxFileName = \"/home/patriciadiasbaldez/Documentos/projetos/netflixclone/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport './App.css';\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const LoadAll = async () => {\n      // pegando a lista total dos filmes\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); //pegando o Featured\n\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    };\n\n    LoadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      black: blackHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), featuredData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n      item: featuredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [\"Feito com \", /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"cora\\xE7\\xE3o\",\n        children: \"\\uD83D\\uDC9C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), \" por Patricia Baldez\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 84\n      }, this), \"Direitos de imagem para Netflix\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 38\n      }, this), \"Dados pegos do site Themoviedb.org\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://c.tenor.com/DQyztbEmqnYAAAAC/netflix-loading.gif\",\n        alt: \"carregando\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n}, \"X/TsTIBWl4G5VJMk6QGmyiovK0c=\");","map":{"version":3,"sources":["/home/patriciadiasbaldez/Documentos/projetos/netflixclone/src/App.js"],"names":["React","useEffect","useState","Tmdb","MovieRow","FeaturedMovie","Header","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","LoadAll","list","getHomeList","originals","filter","i","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListener","window","scrollY","addEventListener","removeEventListener","map","item","key","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from \"react\";\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport './App.css';\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\n\n\nexport default () => {\n  const [movieList, setMovieList]= useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader]= useState(false);\n  \n  useEffect(()=>{\n    const LoadAll = async () => {\n      // pegando a lista total dos filmes\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //pegando o Featured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length-1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n    LoadAll();\n  },[]);\n  useEffect(()=>{\n    const scrollListener = ()=> {\n      if(window.scrollY >  10){\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  },[]);\n\nreturn (\n  <div className=\"page\">\n\n    <Header black={blackHeader}/>\n\n    {featuredData && \n    <FeaturedMovie item={featuredData}/>\n    }\n    <section className=\"lists\">\n      {movieList.map((item, key)=>(\n        <MovieRow key={key} title={item.title} items={item.items}/>\n      ))}\n    </section>\n    <footer>\n      Feito com <span role=\"img\" aria-label=\"coraÃ§Ã£o\">ðŸ’œ</span> por Patricia Baldez<br/>\n      Direitos de imagem para Netflix<br/>\n      Dados pegos do site Themoviedb.org\n    </footer>\n\n    <div className=\"loading\">\n      <img src =\"https://c.tenor.com/DQyztbEmqnYAAAAC/netflix-loading.gif\" alt=\"carregando\"/>\n    </div>\n   \n  </div>\n);\n}"]},"metadata":{},"sourceType":"module"}